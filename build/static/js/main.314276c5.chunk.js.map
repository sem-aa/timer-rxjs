{"version":3,"sources":["components/timer/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","useState","sec","setSec","startStop","setStartStop","time","Date","toISOString","slice","useEffect","stream$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","className","onClick","onDoubleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAIe,SAASA,IACtB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEIC,EAAO,IAAIC,KAAKL,GAAKM,cAAcC,MAAM,GAAI,IAEjDC,qBAAU,WACR,IAAMC,EAAU,IAAIC,IAQpB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLZ,GACFD,GAAO,SAACc,GAAD,OAASA,EAAM,UAGrB,WACLN,EAAQO,OACRP,EAAQQ,cAET,CAACf,IAcJ,OACE,qBAAKgB,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACF,uCACE,oBAAIA,UAAU,OAAd,SAAsBd,IACtB,wBAAQc,UAAU,SAASC,QAjBjB,WACPjB,EAEMA,IACTC,GAAa,GACbF,EAAO,IAHPE,GAAa,IAeb,wBAGA,wBAAQe,UAAU,SAASC,QAXjB,kBAAMlB,EAAO,IAWvB,mBAGA,wBAAQiB,UAAU,SAASE,cAblB,kBAAMjB,GAAa,IAa5B,uBCrCSkB,MARf,WACE,OACE,qBAAKH,UAAU,MAAf,SACC,cAACpB,EAAD,OCMUwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.314276c5.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { interval, takeUntil, Subject } from \"rxjs\";\r\nimport \"./timer.css\";\r\n\r\nexport default function Timer() {\r\n  const [sec, setSec] = useState(0);\r\n  const [startStop, setStartStop] = useState(false);\r\n\r\n  let time = new Date(sec).toISOString().slice(11, 19);\r\n\r\n  useEffect(() => {\r\n    const stream$ = new Subject();\r\n    interval(1000)\r\n      .pipe(takeUntil(stream$))\r\n      .subscribe(() => {\r\n        if (startStop) {\r\n          setSec((val) => val + 1000);\r\n        }\r\n      });\r\n    return () => {\r\n      stream$.next();\r\n      stream$.complete();\r\n    };\r\n  }, [startStop]);\r\n\r\n  const start = () => {\r\n    if (!startStop) {\r\n      setStartStop(true);\r\n    } else if (startStop) {\r\n      setStartStop(false);\r\n      setSec(0);\r\n    }\r\n  };\r\n\r\n  const reset = () => setSec(0);\r\n  const wait = () => setStartStop(false);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"contant\">\r\n    <h1>Timer</h1>\r\n      <h2 className=\"time\">{time}</h2>\r\n      <button className=\"button\" onClick={start}>\r\n        Start/Stop\r\n      </button>\r\n      <button className=\"button\" onClick={reset}>\r\n        Reset\r\n      </button>\r\n      <button className=\"button\" onDoubleClick={wait}>\r\n        Wait\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport Timer from './components/timer/Timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}